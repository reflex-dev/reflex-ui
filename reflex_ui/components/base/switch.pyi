"""Stub file for reflex_ui/components/base/switch.py"""
# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import Annotated, Any, Callable, Dict, Literal, Mapping, Optional, Sequence, Union
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import EventChain, EventHandler, EventSpec, EventType, KeyInputInfo, PointerEventInfo
from reflex.style import Style
from reflex.vars.base import Var
import reflex
from reflex.components.component import Component, ComponentNamespace
from reflex.event import EventHandler, passthrough_event_spec
from reflex.utils.imports import ImportVar
from reflex.vars.base import Var
from reflex_ui.components.base_ui import PACKAGE_NAME, BaseUIComponent

class ClassNames:
    ROOT = 'relative flex h-5 w-8 rounded-full bg-secondary-4 p-0.5 transition-colors duration-200 ease-out before:absolute before:rounded-full before:outline-offset-2 before:outline-primary-8 focus-visible:before:inset-0 data-[checked]:bg-primary-9 disabled:opacity-50 disabled:cursor-not-allowed cursor-default'
    THUMB = 'aspect-square h-full rounded-full bg-white transition-transform duration-200 ease-out data-[checked]:translate-x-3 shadow-small'

class SwitchBaseComponent(BaseUIComponent):

    @property
    def import_var(self):
        ...

    @classmethod
    def create(cls, *children, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SwitchBaseComponent':
        """Create the component.

        Args:
            *children: The children of the component.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class SwitchRoot(SwitchBaseComponent):

    @classmethod
    def create(cls, *children, name: Var[str] | str | None=None, default_checked: Var[bool] | bool | None=None, checked: Var[bool] | bool | None=None, native_button: Var[bool] | bool | None=None, disabled: Var[bool] | bool | None=None, read_only: Var[bool] | bool | None=None, required: Var[bool] | bool | None=None, input_ref: Var[str] | str | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_checked_change: Optional[EventType[()] | EventType[bool]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SwitchRoot':
        """Create the switch root component."""
        ...

class SwitchThumb(SwitchBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SwitchThumb':
        """Create the switch thumb component."""
        ...

class HighLevelSwitch(SwitchRoot):

    @classmethod
    def create(cls, *children, name: Var[str] | str | None=None, default_checked: Var[bool] | bool | None=None, checked: Var[bool] | bool | None=None, native_button: Var[bool] | bool | None=None, disabled: Var[bool] | bool | None=None, read_only: Var[bool] | bool | None=None, required: Var[bool] | bool | None=None, input_ref: Var[str] | str | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_checked_change: Optional[EventType[()] | EventType[bool]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'HighLevelSwitch':
        """Create a complete switch component.

        Args:
            *children: Additional children to include in the switch.
            name: Identifies the field when a form is submitted.
            default_checked: Whether the switch is initially active. To render a controlled switch, use the checked prop instead. Defaults to False.
            checked: Whether the switch is currently active. To render an uncontrolled switch, use the default_checked prop instead.
            on_checked_change: Event handler called when the switch is activated or deactivated.
            native_button: Whether the component renders a native <button> element when replacing it via the render prop. Set to false if the rendered element is not a button (e.g. <div>). Defaults to True.
            disabled: Whether the component should ignore user interaction. Defaults to False.
            read_only: Whether the user should be unable to activate or deactivate the switch. Defaults to False.
            required: Whether the user must activate the switch before submitting a form. Defaults to False.
            input_ref: A ref to access the hidden <input> element.
            render_: The render prop
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: Additional properties to apply to the switch component.

        Returns:
            The switch component.
        """
        ...

class Switch(ComponentNamespace):
    root = staticmethod(SwitchRoot.create)
    thumb = staticmethod(SwitchThumb.create)
    class_names = ClassNames

    @staticmethod
    def __call__(*children, name: Var[str] | str | None=None, default_checked: Var[bool] | bool | None=None, checked: Var[bool] | bool | None=None, native_button: Var[bool] | bool | None=None, disabled: Var[bool] | bool | None=None, read_only: Var[bool] | bool | None=None, required: Var[bool] | bool | None=None, input_ref: Var[str] | str | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_checked_change: Optional[EventType[()] | EventType[bool]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'HighLevelSwitch':
        """Create a complete switch component.

        Args:
            *children: Additional children to include in the switch.
            name: Identifies the field when a form is submitted.
            default_checked: Whether the switch is initially active. To render a controlled switch, use the checked prop instead. Defaults to False.
            checked: Whether the switch is currently active. To render an uncontrolled switch, use the default_checked prop instead.
            on_checked_change: Event handler called when the switch is activated or deactivated.
            native_button: Whether the component renders a native <button> element when replacing it via the render prop. Set to false if the rendered element is not a button (e.g. <div>). Defaults to True.
            disabled: Whether the component should ignore user interaction. Defaults to False.
            read_only: Whether the user should be unable to activate or deactivate the switch. Defaults to False.
            required: Whether the user must activate the switch before submitting a form. Defaults to False.
            input_ref: A ref to access the hidden <input> element.
            render_: The render prop
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: Additional properties to apply to the switch component.

        Returns:
            The switch component.
        """
        ...
switch = Switch()