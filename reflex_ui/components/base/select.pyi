"""Stub file for reflex_ui/components/base/select.py"""
# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import Annotated, Any, Callable, Dict, Literal, Mapping, Optional, Sequence, Union
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import EventChain, EventHandler, EventSpec, EventType, KeyInputInfo, PointerEventInfo
from reflex.style import Style
from reflex.vars.base import Var
import reflex
from typing import Any, Literal
from reflex.components.component import Component, ComponentNamespace
from reflex.components.core.foreach import foreach
from reflex.event import EventHandler, passthrough_event_spec
from reflex.utils.imports import ImportVar
from reflex.vars.base import Var
from reflex_ui.components.base.button import button
from reflex_ui.components.base_ui import PACKAGE_NAME, BaseUIComponent
from reflex_ui.components.icons.hugeicon import hi
from reflex_ui.components.icons.others import select_arrow
from reflex_ui.utils.twmerge import cn
LiteralSelectSize = Literal['xs', 'sm', 'md', 'lg', 'xl']
LiteralAlign = Literal['start', 'center', 'end']
LiteralSide = Literal['bottom', 'inline-end', 'inline-start', 'left', 'right', 'top']
LiteralPosition = Literal['absolute', 'fixed']
LiteralOrientation = Literal['horizontal', 'vertical']

class ClassNames:
    TRIGGER = 'flex min-w-48 items-center justify-between gap-3 select-none text-sm [&>span]:line-clamp-1 cursor-pointer focus:outline-none focus-visible:ring-1 focus-visible:ring-primary-4 group/trigger'
    VALUE = 'flex-1 text-left'
    ICON = 'flex size-4 text-secondary-10 group-data-[disabled]/trigger:text-current'
    POPUP = 'group/popup max-h-[17.25rem] overflow-y-auto origin-(--transform-origin) p-1 border border-secondary-a4 bg-secondary-1 shadow-large transition-[transform,scale,opacity] data-[ending-style]:scale-95 data-[starting-style]:scale-95 data-[ending-style]:opacity-0 data-[starting-style]:opacity-0 outline-none scrollbar-thin scrollbar-thumb-secondary-9 scrollbar-track-transparent'
    ITEM = 'grid min-w-(--anchor-width) grid-cols-[1fr_auto] items-center gap-2 text-sm select-none font-[450] group-data-[side=none]/popup:min-w-[calc(var(--anchor-width)+1rem)] data-[selected]:text-secondary-12 text-secondary-11 cursor-pointer placeholder:text-secondary-9 data-[selected]:font-medium outline-none data-[highlighted]:bg-secondary-3 scroll-m-1'
    ITEM_INDICATOR = 'text-current'
    ITEM_TEXT = 'text-start'
    GROUP = 'p-1'
    GROUP_LABEL = 'px-2 py-1.5 text-sm font-semibold'
    SEPARATOR = '-mx-1 my-1 h-px bg-muted'
    ARROW = 'data-[side=bottom]:top-[-8px] data-[side=left]:right-[-13px] data-[side=left]:rotate-90 data-[side=right]:left-[-13px] data-[side=right]:-rotate-90 data-[side=top]:bottom-[-8px] data-[side=top]:rotate-180'
    POSITIONER = 'outline-none'
    SCROLL_ARROW_UP = "top-0 z-[1] flex h-4 w-full cursor-default items-center justify-center rounded-ui-md bg-secondary-1 text-center text-xs before:absolute before:top-[-100%] before:left-0 before:h-full before:w-full before:content-[''] data-[direction=down]:bottom-0 data-[direction=down]:before:bottom-[-100%]"
    SCROLL_ARROW_DOWN = "bottom-0 z-[1] flex h-4 w-full cursor-default items-center justify-center rounded-ui-md bg-secondary-1 text-center text-xs before:absolute before:top-[-100%] before:left-0 before:h-full before:w-full before:content-[''] data-[direction=down]:bottom-0 data-[direction=down]:before:bottom-[-100%]"

class SelectBaseComponent(BaseUIComponent):

    @property
    def import_var(self):
        ...

    @classmethod
    def create(cls, *children, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectBaseComponent':
        """Create the component.

        Args:
            *children: The children of the component.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class SelectRoot(SelectBaseComponent):

    @classmethod
    def create(cls, *children, name: Var[str] | str | None=None, default_value: Any | Var[Any] | None=None, value: Any | Var[Any] | None=None, default_open: Var[bool] | bool | None=None, open: Var[bool] | bool | None=None, actions_ref: Var[str] | str | None=None, is_item_equal_to_value: Any | Var[Any] | None=None, item_to_string_label: Any | Var[Any] | None=None, item_to_string_value: Any | Var[Any] | None=None, items: Any | Var[Any] | None=None, modal: Var[bool] | bool | None=None, multiple: Var[bool] | bool | None=None, disabled: Var[bool] | bool | None=None, read_only: Var[bool] | bool | None=None, required: Var[bool] | bool | None=None, input_ref: Any | Var[Any] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_open_change: Optional[EventType[()] | EventType[bool]]=None, on_open_change_complete: Optional[EventType[()] | EventType[bool]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, on_value_change: Optional[EventType[()] | EventType[str]]=None, **props) -> 'SelectRoot':
        """Create the select root component."""
        ...

class SelectTrigger(SelectBaseComponent):

    @classmethod
    def create(cls, *children, disabled: Var[bool] | bool | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectTrigger':
        """Create the select trigger component."""
        ...

class SelectValue(SelectBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectValue':
        """Create the dialog trigger component."""
        ...

class SelectBackdrop(SelectBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectBackdrop':
        """Create the component.

        Args:
            *children: The children of the component.
            render_: The render prop
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class SelectPortal(SelectBaseComponent):

    @classmethod
    def create(cls, *children, container: Var[str] | str | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectPortal':
        """Create the component.

        Args:
            *children: The children of the component.
            container: A parent element to render the portal element into.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class SelectPositioner(SelectBaseComponent):

    @classmethod
    def create(cls, *children, align: Literal['center', 'end', 'start'] | Var[Literal['center', 'end', 'start']] | None=None, align_offset: Var[int] | int | None=None, side: Literal['bottom', 'inline-end', 'inline-start', 'left', 'right', 'top'] | Var[Literal['bottom', 'inline-end', 'inline-start', 'left', 'right', 'top']] | None=None, arrow_padding: Var[int] | int | None=None, collision_padding: Var[int | list[int]] | int | list[int] | None=None, sticky: Var[bool] | bool | None=None, position_method: Literal['absolute', 'fixed'] | Var[Literal['absolute', 'fixed']] | None=None, align_item_with_trigger: Var[bool] | bool | None=None, track_anchor: Var[bool] | bool | None=None, side_offset: Var[int] | int | None=None, collision_avoidance: Var[str] | str | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectPositioner':
        """Create the dialog trigger component."""
        ...

class SelectPopup(SelectBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectPopup':
        """Create the dialog trigger component."""
        ...

class SelectItem(SelectBaseComponent):

    @classmethod
    def create(cls, *children, label: Var[str] | str | None=None, value: Any | Var[Any] | None=None, disabled: Var[bool] | bool | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectItem':
        """Create the dialog trigger component."""
        ...

class SelectItemText(SelectBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectItemText':
        """Create the dialog trigger component."""
        ...

class SelectItemIndicator(SelectBaseComponent):

    @classmethod
    def create(cls, *children, keep_mounted: Var[bool] | bool | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectItemIndicator':
        """Create the dialog trigger component."""
        ...

class SelectGroup(SelectBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectGroup':
        """Create the dialog trigger component."""
        ...

class SelectGroupLabel(SelectBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectGroupLabel':
        """Create the dialog trigger component."""
        ...

class SelectSeparator(SelectBaseComponent):

    @classmethod
    def create(cls, *children, orientation: Literal['horizontal', 'vertical'] | Var[Literal['horizontal', 'vertical']] | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectSeparator':
        """Create the dialog trigger component."""
        ...

class SelectIcon(SelectBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectIcon':
        """Create the dialog trigger component."""
        ...

class SelectArrow(SelectBaseComponent):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectArrow':
        """Create the dialog trigger component."""
        ...

class SelectScrollUpArrow(SelectBaseComponent):

    @classmethod
    def create(cls, *children, keep_mounted: Var[bool] | bool | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectScrollUpArrow':
        """Create the dialog trigger component."""
        ...

class SelectScrollDownArrow(SelectBaseComponent):

    @classmethod
    def create(cls, *children, keep_mounted: Var[bool] | bool | None=None, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'SelectScrollDownArrow':
        """Create the dialog trigger component."""
        ...

class HighLevelSelect(SelectRoot):

    @classmethod
    def create(cls, *children, items: Var[list[str]] | list[str] | None=None, placeholder: Var[str] | str | None=None, size: Literal['lg', 'md', 'sm', 'xl', 'xs'] | Var[Literal['lg', 'md', 'sm', 'xl', 'xs']] | None=None, name: Var[str] | str | None=None, default_value: Any | Var[Any] | None=None, value: Any | Var[Any] | None=None, default_open: Var[bool] | bool | None=None, open: Var[bool] | bool | None=None, actions_ref: Var[str] | str | None=None, is_item_equal_to_value: Any | Var[Any] | None=None, item_to_string_label: Any | Var[Any] | None=None, item_to_string_value: Any | Var[Any] | None=None, modal: Var[bool] | bool | None=None, multiple: Var[bool] | bool | None=None, disabled: Var[bool] | bool | None=None, read_only: Var[bool] | bool | None=None, required: Var[bool] | bool | None=None, input_ref: Any | Var[Any] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_open_change: Optional[EventType[()] | EventType[bool]]=None, on_open_change_complete: Optional[EventType[()] | EventType[bool]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, on_value_change: Optional[EventType[()] | EventType[str]]=None, **props) -> 'HighLevelSelect':
        """Create a select component.

        Args:
            *children: Additional children to include in the select.
            items: Data structure of the items rendered in the select popup.  When specified, `<Select.Value>` renders the label of the selected item instead of the raw value.
            placeholder: The placeholder text to display when no item is selected
            size: The size of the select component. Defaults to "md".
            name: Identifies the field when a form is submitted.
            default_value: The uncontrolled value of the select when it's initially rendered.  To render a controlled select, use the `value` prop instead.
            value: The value of the select
            on_value_change: Callback fired when the value of the select changes. Use when controlled.
            default_open: Whether the select popup is initially open.  To render a controlled select popup, use the `open` prop instead.
            open: Whether the select popup is currently open
            on_open_change: Event handler called when the select popup is opened or closed
            actions_ref: A ref to imperative actions.  When specified, the select will not be unmounted when closed.  Instead, the `unmount` function must be called to unmount the select manually.  Useful when the select's animation is controlled by an external library.
            is_item_equal_to_value: Custom comparison logic used to determine if a select item value matches the current selected value.  Useful when item values are objects without matching referentially.  Defaults to `Object.is` comparison.
            item_to_string_label: When the item values are objects, this function converts the object value to a string representation for display in the trigger.  If the shape of the object is `{ value, label }`, the label will be used automatically without needing to specify this prop.
            item_to_string_value: When the item values are objects, this function converts the object value to a string representation for form submission.  If the shape of the object is `{ value, label }`, the value will be used automatically without needing to specify this prop.
            modal: Determines if the select enters a modal state when open.  - True: user interaction is limited to the select: document page scroll is locked and pointer interactions on outside elements are disabled.  - False: user interaction with the rest of the document is allowed. Defaults to True.
            multiple: Whether multiple items can be selected. Defaults to False.
            on_open_change_complete: Event handler called after any animations complete when the select popup is opened or closed
            disabled: Whether the component should ignore user interaction. Defaults to False.
            read_only: Whether the user should be unable to choose a different option from the select popup. Defaults to False.
            required: Whether the user must choose a value before submitting a form. Defaults to False.
            input_ref: A ref to access the hidden input element.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: Additional properties to apply to the select component.

        Returns:
            The select component.
        """
        ...

class Select(ComponentNamespace):
    root = staticmethod(SelectRoot.create)
    trigger = staticmethod(SelectTrigger.create)
    value = staticmethod(SelectValue.create)
    icon = staticmethod(SelectIcon.create)
    backdrop = staticmethod(SelectBackdrop.create)
    portal = staticmethod(SelectPortal.create)
    positioner = staticmethod(SelectPositioner.create)
    popup = staticmethod(SelectPopup.create)
    arrow = staticmethod(SelectArrow.create)
    scroll_up_arrow = staticmethod(SelectScrollUpArrow.create)
    scroll_down_arrow = staticmethod(SelectScrollDownArrow.create)
    item = staticmethod(SelectItem.create)
    item_text = staticmethod(SelectItemText.create)
    item_indicator = staticmethod(SelectItemIndicator.create)
    group = staticmethod(SelectGroup.create)
    group_label = staticmethod(SelectGroupLabel.create)
    separator = staticmethod(SelectSeparator.create)
    class_names = ClassNames

    @staticmethod
    def __call__(*children, items: Var[list[str]] | list[str] | None=None, placeholder: Var[str] | str | None=None, size: Literal['lg', 'md', 'sm', 'xl', 'xs'] | Var[Literal['lg', 'md', 'sm', 'xl', 'xs']] | None=None, name: Var[str] | str | None=None, default_value: Any | Var[Any] | None=None, value: Any | Var[Any] | None=None, default_open: Var[bool] | bool | None=None, open: Var[bool] | bool | None=None, actions_ref: Var[str] | str | None=None, is_item_equal_to_value: Any | Var[Any] | None=None, item_to_string_label: Any | Var[Any] | None=None, item_to_string_value: Any | Var[Any] | None=None, modal: Var[bool] | bool | None=None, multiple: Var[bool] | bool | None=None, disabled: Var[bool] | bool | None=None, read_only: Var[bool] | bool | None=None, required: Var[bool] | bool | None=None, input_ref: Any | Var[Any] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_open_change: Optional[EventType[()] | EventType[bool]]=None, on_open_change_complete: Optional[EventType[()] | EventType[bool]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, on_value_change: Optional[EventType[()] | EventType[str]]=None, **props) -> 'HighLevelSelect':
        """Create a select component.

        Args:
            *children: Additional children to include in the select.
            items: Data structure of the items rendered in the select popup.  When specified, `<Select.Value>` renders the label of the selected item instead of the raw value.
            placeholder: The placeholder text to display when no item is selected
            size: The size of the select component. Defaults to "md".
            name: Identifies the field when a form is submitted.
            default_value: The uncontrolled value of the select when it's initially rendered.  To render a controlled select, use the `value` prop instead.
            value: The value of the select
            on_value_change: Callback fired when the value of the select changes. Use when controlled.
            default_open: Whether the select popup is initially open.  To render a controlled select popup, use the `open` prop instead.
            open: Whether the select popup is currently open
            on_open_change: Event handler called when the select popup is opened or closed
            actions_ref: A ref to imperative actions.  When specified, the select will not be unmounted when closed.  Instead, the `unmount` function must be called to unmount the select manually.  Useful when the select's animation is controlled by an external library.
            is_item_equal_to_value: Custom comparison logic used to determine if a select item value matches the current selected value.  Useful when item values are objects without matching referentially.  Defaults to `Object.is` comparison.
            item_to_string_label: When the item values are objects, this function converts the object value to a string representation for display in the trigger.  If the shape of the object is `{ value, label }`, the label will be used automatically without needing to specify this prop.
            item_to_string_value: When the item values are objects, this function converts the object value to a string representation for form submission.  If the shape of the object is `{ value, label }`, the value will be used automatically without needing to specify this prop.
            modal: Determines if the select enters a modal state when open.  - True: user interaction is limited to the select: document page scroll is locked and pointer interactions on outside elements are disabled.  - False: user interaction with the rest of the document is allowed. Defaults to True.
            multiple: Whether multiple items can be selected. Defaults to False.
            on_open_change_complete: Event handler called after any animations complete when the select popup is opened or closed
            disabled: Whether the component should ignore user interaction. Defaults to False.
            read_only: Whether the user should be unable to choose a different option from the select popup. Defaults to False.
            required: Whether the user must choose a value before submitting a form. Defaults to False.
            input_ref: A ref to access the hidden input element.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: Additional properties to apply to the select component.

        Returns:
            The select component.
        """
        ...
select = Select()