"""Stub file for reflex_ui/components/base/checkbox.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from collections.abc import Mapping, Sequence
from typing import Any

from reflex.components.component import ComponentNamespace
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import EventType, PointerEventInfo
from reflex.vars import Var
from reflex.vars.base import Var

from reflex_ui.components.base_ui import BaseUIComponent

class ClassNames:
    ROOT = "flex size-4 items-center justify-center rounded-[4px] data-[checked]:bg-primary-9 data-[unchecked]:border data-[unchecked]:border-secondary-8 data-[disabled]:cursor-not-allowed data-[disabled]:border data-[disabled]:border-secondary-4 data-[disabled]:bg-secondary-3 hover:bg-secondary-3 transition-colors cursor-default"
    INDICATOR = (
        "flex text-white data-[unchecked]:hidden data-[disabled]:text-secondary-8"
    )
    LABEL = "text-sm text-secondary-12 font-medium flex items-center gap-2"
    CONTAINER = "flex flex-row items-center gap-2"

class CheckboxBaseComponent(BaseUIComponent):
    @property
    def import_var(self): ...
    @classmethod
    def create(
        cls,
        *children,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> CheckboxBaseComponent:
        """Create the component.

        Args:
            *children: The children of the component.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """

class CheckboxRoot(CheckboxBaseComponent):
    @classmethod
    def create(
        cls,
        *children,
        default_checked: Var[bool] | bool | None = None,
        checked: Var[bool] | bool | None = None,
        indeterminate: Var[bool] | bool | None = None,
        disabled: Var[bool] | bool | None = None,
        required: Var[bool] | bool | None = None,
        name: Var[str] | str | None = None,
        value: Var[str] | str | None = None,
        native_button: Var[bool] | bool | None = None,
        parent: Var[bool] | bool | None = None,
        read_only: Var[bool] | bool | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_checked_change: EventType[()]
        | EventType[bool]
        | EventType[bool, dict]
        | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> CheckboxRoot:
        """Create the checkbox root component."""

class CheckboxIndicator(CheckboxBaseComponent):
    @classmethod
    def create(
        cls,
        *children,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> CheckboxIndicator:
        """Create the checkbox indicator component."""

class HighLevelCheckbox(CheckboxRoot):
    @classmethod
    def create(
        cls,
        *children,
        default_checked: Var[bool] | bool | None = None,
        checked: Var[bool] | bool | None = None,
        indeterminate: Var[bool] | bool | None = None,
        disabled: Var[bool] | bool | None = None,
        required: Var[bool] | bool | None = None,
        name: Var[str] | str | None = None,
        value: Var[str] | str | None = None,
        native_button: Var[bool] | bool | None = None,
        parent: Var[bool] | bool | None = None,
        read_only: Var[bool] | bool | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_checked_change: EventType[()]
        | EventType[bool]
        | EventType[bool, dict]
        | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> HighLevelCheckbox:
        """Create a high level checkbox component.

        Args:
            *children: The content of the checkbox.
            default_checked: Whether the checkbox is initially ticked. To render a controlled checkbox, use the checked prop instead. Defaults to False.
            checked: Whether the checkbox is currently ticked. To render an uncontrolled checkbox, use the default_checked prop instead.
            on_checked_change: Event handler called when the checkbox is ticked or unticked.
            indeterminate: Whether the checkbox is in a mixed state: neither ticked, nor unticked. Defaults to False.
            disabled: Whether the component should ignore user interaction. Defaults to False.
            required: Whether the checkbox is required. Defaults to False.
            name: Identifies the field when a form is submitted.
            value: The value of the selected checkbox.
            native_button: Whether the component renders a native <button> element when replacing it via the render prop. Set to false if the rendered element is not a button (e.g. <div>). Defaults to True.
            parent: Whether the checkbox controls a group of child checkboxes. Must be used in a Checkbox Group. Defaults to False.
            read_only: Whether the user should be unable to tick or untick the checkbox. Defaults to False.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: Additional properties to apply to the checkbox component.

        Returns:
            The checkbox component and its indicator.
        """

class CheckboxNamespace(ComponentNamespace):
    root = staticmethod(CheckboxRoot.create)
    indicator = staticmethod(CheckboxIndicator.create)
    high_level = staticmethod(HighLevelCheckbox.create)

    @staticmethod
    def __call__(
        *children,
        default_checked: Var[bool] | bool | None = None,
        checked: Var[bool] | bool | None = None,
        indeterminate: Var[bool] | bool | None = None,
        disabled: Var[bool] | bool | None = None,
        required: Var[bool] | bool | None = None,
        name: Var[str] | str | None = None,
        value: Var[str] | str | None = None,
        native_button: Var[bool] | bool | None = None,
        parent: Var[bool] | bool | None = None,
        read_only: Var[bool] | bool | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        autofocus: bool | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_checked_change: EventType[()]
        | EventType[bool]
        | EventType[bool, dict]
        | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> HighLevelCheckbox:
        """Create a high level checkbox component.

        Args:
            *children: The content of the checkbox.
            default_checked: Whether the checkbox is initially ticked. To render a controlled checkbox, use the checked prop instead. Defaults to False.
            checked: Whether the checkbox is currently ticked. To render an uncontrolled checkbox, use the default_checked prop instead.
            on_checked_change: Event handler called when the checkbox is ticked or unticked.
            indeterminate: Whether the checkbox is in a mixed state: neither ticked, nor unticked. Defaults to False.
            disabled: Whether the component should ignore user interaction. Defaults to False.
            required: Whether the checkbox is required. Defaults to False.
            name: Identifies the field when a form is submitted.
            value: The value of the selected checkbox.
            native_button: Whether the component renders a native <button> element when replacing it via the render prop. Set to false if the rendered element is not a button (e.g. <div>). Defaults to True.
            parent: Whether the checkbox controls a group of child checkboxes. Must be used in a Checkbox Group. Defaults to False.
            read_only: Whether the user should be unable to tick or untick the checkbox. Defaults to False.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: Additional properties to apply to the checkbox component.

        Returns:
            The checkbox component and its indicator.
        """

checkbox = CheckboxNamespace()
