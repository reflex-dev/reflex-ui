"""Stub file for reflex_ui/components/base/badge.py"""
# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import Annotated, Any, Callable, Dict, Literal, Mapping, Optional, Sequence, Union
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import EventChain, EventHandler, EventSpec, EventType, KeyInputInfo, PointerEventInfo
from reflex.style import Style
from reflex.vars.base import Var
import reflex
from typing import Literal
from reflex.components.el import Span
from reflex.vars.base import Var
from reflex_ui.components.component import CoreComponent
BaseColorType = Literal['primary', 'secondary', 'info', 'success', 'warning', 'destructive', 'gray', 'mauve', 'slate', 'sage', 'olive', 'sand', 'tomato', 'red', 'ruby', 'crimson', 'pink', 'plum', 'purple', 'violet', 'iris', 'indigo', 'blue', 'cyan', 'teal', 'jade', 'green', 'grass', 'brown', 'orange', 'sky', 'mint', 'lime', 'yellow', 'amber', 'gold', 'bronze']
LiteralBadgeVariant = Literal['solid', 'soft']
LiteralBadgeSize = Literal['xs', 'sm', 'md']
DEFAULT_BASE_CLASSES = 'inline-flex items-center font-medium [&_svg]:pointer-events-none [&_svg]:shrink-0 gap-1.5'
LIGHT_COLORS = {'sky', 'mint', 'lime', 'yellow', 'amber', 'secondary'}
BADGE_VARIANTS = {'size': {'xs': 'px-1.5 py-0.5 h-4 rounded-ui-xss text-[11px] [&_svg]:size-3', 'sm': 'px-1.5 py-0.5 h-5 rounded-ui-xs text-xs [&_svg]:size-3.5', 'md': 'px-2 py-0.5 h-6 rounded-ui-sm text-sm [&_svg]:size-4'}}

def get_color_classes(color: str, variant: LiteralBadgeVariant) -> str:
    ...

def get_badge_classes(color: str, variant: LiteralBadgeVariant, size: LiteralBadgeSize) -> str:
    ...

class Badge(Span, CoreComponent):

    @classmethod
    def create(cls, *children, color: Literal['amber', 'blue', 'bronze', 'brown', 'crimson', 'cyan', 'destructive', 'gold', 'grass', 'gray', 'green', 'indigo', 'info', 'iris', 'jade', 'lime', 'mauve', 'mint', 'olive', 'orange', 'pink', 'plum', 'primary', 'purple', 'red', 'ruby', 'sage', 'sand', 'secondary', 'sky', 'slate', 'success', 'teal', 'tomato', 'violet', 'warning', 'yellow'] | Var[str] | str=None, variant: Literal['soft', 'solid'] | Var[Literal['soft', 'solid']] | None=None, size: Literal['md', 'sm', 'xs'] | Var[Literal['md', 'sm', 'xs']] | None=None, access_key: Var[str] | str | None=None, auto_capitalize: Literal['characters', 'none', 'off', 'on', 'sentences', 'words'] | Var[Literal['characters', 'none', 'off', 'on', 'sentences', 'words']] | None=None, content_editable: Literal['inherit', 'plaintext-only', False, True] | Var[Literal['inherit', 'plaintext-only', False, True]] | None=None, context_menu: Var[str] | str | None=None, dir: Var[str] | str | None=None, draggable: Var[bool] | bool | None=None, enter_key_hint: Literal['done', 'enter', 'go', 'next', 'previous', 'search', 'send'] | Var[Literal['done', 'enter', 'go', 'next', 'previous', 'search', 'send']] | None=None, hidden: Var[bool] | bool | None=None, input_mode: Literal['decimal', 'email', 'none', 'numeric', 'search', 'tel', 'text', 'url'] | Var[Literal['decimal', 'email', 'none', 'numeric', 'search', 'tel', 'text', 'url']] | None=None, item_prop: Var[str] | str | None=None, lang: Var[str] | str | None=None, role: Literal['alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed', 'figure', 'form', 'grid', 'gridcell', 'group', 'heading', 'img', 'link', 'list', 'listbox', 'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'search', 'searchbox', 'separator', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'textbox', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem'] | Var[Literal['alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed', 'figure', 'form', 'grid', 'gridcell', 'group', 'heading', 'img', 'link', 'list', 'listbox', 'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'search', 'searchbox', 'separator', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'textbox', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem']] | None=None, slot: Var[str] | str | None=None, spell_check: Var[bool] | bool | None=None, tab_index: Var[int] | int | None=None, title: Var[str] | str | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'Badge':
        """Create the badge component."""
        ...
badge = Badge.create