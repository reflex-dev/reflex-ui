"""Stub file for reflex_ui/components/base/slider.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from collections.abc import Mapping, Sequence
from typing import Any, Literal

from reflex.components.component import Component, ComponentNamespace
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import EventType, PointerEventInfo, passthrough_event_spec
from reflex.vars.base import Var

from reflex_ui.components.base_ui import BaseUIComponent

LiteralOrientation = Literal["horizontal", "vertical"]
on_value_event_spec = (
    passthrough_event_spec(int),
    passthrough_event_spec(float),
    passthrough_event_spec(list[int | float]),
    passthrough_event_spec(list[int]),
    passthrough_event_spec(list[float]),
)

class ClassNames:
    ROOT = "flex max-w-64 w-full touch-none items-center select-none"
    VALUE = "text-sm text-primary-11 font-medium"
    CONTROL = "flex items-center justify-center w-full"
    TRACK = "h-2 w-full rounded-full bg-secondary-4 select-none"
    INDICATOR = "absolute h-full rounded-full bg-primary-9 select-none"
    THUMB = "h-4 w-[0.575rem] rounded-[2px] bg-white outline outline-black/30 select-none box-shadow:[0_0_0_1px_rgba(0,0,0,1),0_1px_2px_rgba(0,0,0,.04)] data-[dragging]:h-5 transition-[height,scale] hover:h-4.5"

class SliderBaseComponent(BaseUIComponent):
    @property
    def import_var(self): ...
    @classmethod
    def create(
        cls,
        *children,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> SliderBaseComponent:
        """Create the component.

        Args:
            *children: The children of the component.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """

class SliderRoot(SliderBaseComponent):
    @classmethod
    def create(
        cls,
        *children,
        name: Var[str] | str | None = None,
        default_value: Var[float | int | list[float | int]]
        | float
        | int
        | list[float | int]
        | None = None,
        value: Var[float | int | list[float | int]]
        | float
        | int
        | list[float | int]
        | None = None,
        locale: Var[str] | str | None = None,
        step: Var[float | int] | float | int | None = None,
        large_step: Var[float | int] | float | int | None = None,
        min_steps_between_values: Var[float | int] | float | int | None = None,
        min: Var[float | int] | float | int | None = None,
        max: Var[float | int] | float | int | None = None,
        format: Var[dict] | dict | None = None,
        disabled: Var[bool] | bool | None = None,
        orientation: Literal["horizontal", "vertical"]
        | Var[Literal["horizontal", "vertical"]]
        | None = None,
        input_ref: Var[str] | str | None = None,
        render_: Component | Var[Component] | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        on_value_change: EventType[()]
        | EventType[int]
        | (EventType[()] | EventType[float])
        | (EventType[()] | EventType[list[int | float]])
        | (EventType[()] | EventType[list[int]])
        | (EventType[()] | EventType[list[float]])
        | None = None,
        on_value_committed: EventType[()]
        | EventType[int]
        | (EventType[()] | EventType[float])
        | (EventType[()] | EventType[list[int | float]])
        | (EventType[()] | EventType[list[int]])
        | (EventType[()] | EventType[list[float]])
        | None = None,
        **props,
    ) -> SliderRoot:
        """Create the slider root component."""

class SliderValue(SliderBaseComponent):
    @classmethod
    def create(
        cls,
        *children,
        render_: Component | Var[Component] | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> SliderValue:
        """Create the slider value component."""

class SliderControl(SliderBaseComponent):
    @classmethod
    def create(
        cls,
        *children,
        render_: Component | Var[Component] | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> SliderControl:
        """Create the slider control component."""

class SliderTrack(SliderBaseComponent):
    @classmethod
    def create(
        cls,
        *children,
        render_: Component | Var[Component] | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> SliderTrack:
        """Create the slider track component."""

class SliderIndicator(SliderBaseComponent):
    @classmethod
    def create(
        cls,
        *children,
        render_: Component | Var[Component] | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> SliderIndicator:
        """Create the slider indicator component."""

class SliderThumb(SliderBaseComponent):
    @classmethod
    def create(
        cls,
        *children,
        get_aria_label: Var[str] | str | None = None,
        get_aria_value_text: Var[str] | str | None = None,
        disabled: Var[bool] | bool | None = None,
        render_: Component | Var[Component] | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        **props,
    ) -> SliderThumb:
        """Create the slider thumb component."""

class HighLevelSlider(SliderRoot):
    @classmethod
    def create(
        cls,
        *children,
        name: Var[str] | str | None = None,
        default_value: Var[float | int | list[float | int]]
        | float
        | int
        | list[float | int]
        | None = None,
        value: Var[float | int | list[float | int]]
        | float
        | int
        | list[float | int]
        | None = None,
        locale: Var[str] | str | None = None,
        step: Var[float | int] | float | int | None = None,
        large_step: Var[float | int] | float | int | None = None,
        min_steps_between_values: Var[float | int] | float | int | None = None,
        min: Var[float | int] | float | int | None = None,
        max: Var[float | int] | float | int | None = None,
        format: Var[dict] | dict | None = None,
        disabled: Var[bool] | bool | None = None,
        orientation: Literal["horizontal", "vertical"]
        | Var[Literal["horizontal", "vertical"]]
        | None = None,
        input_ref: Var[str] | str | None = None,
        render_: Component | Var[Component] | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        on_value_change: EventType[()]
        | EventType[int]
        | (EventType[()] | EventType[float])
        | (EventType[()] | EventType[list[int | float]])
        | (EventType[()] | EventType[list[int]])
        | (EventType[()] | EventType[list[float]])
        | None = None,
        on_value_committed: EventType[()]
        | EventType[int]
        | (EventType[()] | EventType[float])
        | (EventType[()] | EventType[list[int | float]])
        | (EventType[()] | EventType[list[int]])
        | (EventType[()] | EventType[list[float]])
        | None = None,
        **props,
    ) -> HighLevelSlider:
        """Create a complete slider component.

        Args:
            name: Identifies the field when a form is submitted.
            default_value: The uncontrolled value of the slider when it's initially rendered. To render a controlled slider, use the value prop instead.
            value: The value of the slider. For ranged sliders, provide an array with two values.
            on_value_change: Callback function that is fired when the slider's value changed.
            on_value_committed: Callback function that is fired when the pointerup is triggered.
            locale: Locale information for formatting.
            step: The granularity with which the slider can step through values. (A "discrete" slider.) The min prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step. Defaults to 1.
            large_step: The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down. Defaults to 10.
            min_steps_between_values: The minimum steps between values in a range slider. Defaults to 0.
            min: The minimum allowed value of the slider. Should not be equal to max. Defaults to 0.
            max: The maximum allowed value of the slider. Should not be equal to min. Defaults to 100.
            format: Options to format the input value.
            disabled: Whether the slider is disabled.
            orientation: The component orientation. Defaults to "horizontal".
            input_ref: A ref to access the hidden input element.
            render_: The render prop
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: Additional properties to apply to the slider component.

        Returns:
            The slider component.
        """

class Slider(ComponentNamespace):
    root = staticmethod(SliderRoot.create)
    value = staticmethod(SliderValue.create)
    control = staticmethod(SliderControl.create)
    track = staticmethod(SliderTrack.create)
    indicator = staticmethod(SliderIndicator.create)
    thumb = staticmethod(SliderThumb.create)

    @staticmethod
    def __call__(
        *children,
        name: Var[str] | str | None = None,
        default_value: Var[float | int | list[float | int]]
        | float
        | int
        | list[float | int]
        | None = None,
        value: Var[float | int | list[float | int]]
        | float
        | int
        | list[float | int]
        | None = None,
        locale: Var[str] | str | None = None,
        step: Var[float | int] | float | int | None = None,
        large_step: Var[float | int] | float | int | None = None,
        min_steps_between_values: Var[float | int] | float | int | None = None,
        min: Var[float | int] | float | int | None = None,
        max: Var[float | int] | float | int | None = None,
        format: Var[dict] | dict | None = None,
        disabled: Var[bool] | bool | None = None,
        orientation: Literal["horizontal", "vertical"]
        | Var[Literal["horizontal", "vertical"]]
        | None = None,
        input_ref: Var[str] | str | None = None,
        render_: Component | Var[Component] | None = None,
        unstyled: Var[bool] | bool | None = None,
        style: Sequence[Mapping[str, Any]]
        | Mapping[str, Any]
        | Var[Mapping[str, Any]]
        | Breakpoints
        | None = None,
        key: Any | None = None,
        id: Any | None = None,
        ref: Var | None = None,
        class_name: Any | None = None,
        custom_attrs: dict[str, Var | Any] | None = None,
        on_blur: EventType[()] | None = None,
        on_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_context_menu: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_double_click: EventType[()] | EventType[PointerEventInfo] | None = None,
        on_focus: EventType[()] | None = None,
        on_mount: EventType[()] | None = None,
        on_mouse_down: EventType[()] | None = None,
        on_mouse_enter: EventType[()] | None = None,
        on_mouse_leave: EventType[()] | None = None,
        on_mouse_move: EventType[()] | None = None,
        on_mouse_out: EventType[()] | None = None,
        on_mouse_over: EventType[()] | None = None,
        on_mouse_up: EventType[()] | None = None,
        on_scroll: EventType[()] | None = None,
        on_scroll_end: EventType[()] | None = None,
        on_unmount: EventType[()] | None = None,
        on_value_change: EventType[()]
        | EventType[int]
        | (EventType[()] | EventType[float])
        | (EventType[()] | EventType[list[int | float]])
        | (EventType[()] | EventType[list[int]])
        | (EventType[()] | EventType[list[float]])
        | None = None,
        on_value_committed: EventType[()]
        | EventType[int]
        | (EventType[()] | EventType[float])
        | (EventType[()] | EventType[list[int | float]])
        | (EventType[()] | EventType[list[int]])
        | (EventType[()] | EventType[list[float]])
        | None = None,
        **props,
    ) -> HighLevelSlider:
        """Create a complete slider component.

        Args:
            name: Identifies the field when a form is submitted.
            default_value: The uncontrolled value of the slider when it's initially rendered. To render a controlled slider, use the value prop instead.
            value: The value of the slider. For ranged sliders, provide an array with two values.
            on_value_change: Callback function that is fired when the slider's value changed.
            on_value_committed: Callback function that is fired when the pointerup is triggered.
            locale: Locale information for formatting.
            step: The granularity with which the slider can step through values. (A "discrete" slider.) The min prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step. Defaults to 1.
            large_step: The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down. Defaults to 10.
            min_steps_between_values: The minimum steps between values in a range slider. Defaults to 0.
            min: The minimum allowed value of the slider. Should not be equal to max. Defaults to 0.
            max: The maximum allowed value of the slider. Should not be equal to min. Defaults to 100.
            format: Options to format the input value.
            disabled: Whether the slider is disabled.
            orientation: The component orientation. Defaults to "horizontal".
            input_ref: A ref to access the hidden input element.
            render_: The render prop
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: Additional properties to apply to the slider component.

        Returns:
            The slider component.
        """

slider = Slider()
