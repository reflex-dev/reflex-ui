"""Stub file for reflex_ui/components/base/input.py"""
# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import Annotated, Any, Callable, Dict, Literal, Mapping, Optional, Sequence, Union
from reflex.components.core.breakpoints import Breakpoints
from reflex.event import EventChain, EventHandler, EventSpec, EventType, KeyInputInfo, PointerEventInfo
from reflex.style import Style
from reflex.vars.base import Var
import reflex
from typing import Literal
from reflex.components.component import Component, ComponentNamespace
from reflex.components.el import Button, Div, Span
from reflex.components.el import Input as ReflexInput
from reflex.event import EventHandler, passthrough_event_spec, set_focus, set_value
from reflex.utils.imports import ImportVar
from reflex.vars.base import Var, get_unique_variable_name
from reflex_ui.components.base_ui import PACKAGE_NAME, BaseUIComponent
from reflex_ui.components.icons.hugeicon import hi
from reflex_ui.utils.twmerge import cn
INPUT_SIZE_VARIANTS = {'xs': 'px-1.5 h-7 rounded-ui-xs gap-1.5', 'sm': 'px-2 h-8 rounded-ui-sm gap-2', 'md': 'px-2.5 h-9 rounded-ui-md gap-2', 'lg': 'px-3 h-10 rounded-lg gap-2.5', 'xl': 'px-3.5 h-12 rounded-ui-xl gap-3'}
LiteralControlSize = Literal['xs', 'sm', 'md', 'lg', 'xl']
DEFAULT_INPUT_ATTRS = {'autoComplete': 'off', 'autoCapitalize': 'none', 'autoCorrect': 'off', 'spellCheck': 'false'}

class ClassNames:
    INPUT = 'outline-none bg-transparent text-secondary-12 placeholder:text-secondary-9 text-sm leading-normal peer disabled:text-secondary-8 disabled:placeholder:text-secondary-8 w-full data-[disabled]:pointer-events-none font-medium'
    DIV = 'flex flex-row items-center focus-within:shadow-[0px_0px_0px_2px_var(--primary-4)] focus-within:border-primary-a6 not-data-[invalid]:focus-within:hover:border-primary-a6 bg-secondary-1 shrink-0 border border-secondary-a4 hover:border-secondary-a6 transition-all text-secondary-9 [&_svg]:pointer-events-none has-data-[disabled]:border-secondary-4 has-data-[disabled]:bg-secondary-3 has-data-[disabled]:text-secondary-8 has-data-[disabled]:cursor-not-allowed cursor-text has-data-[invalid]:border-destructive-10 has-data-[invalid]:focus-within:border-destructive-a11 has-data-[invalid]:focus-within:shadow-[0px_0px_0px_2px_var(--destructive-4)] has-data-[invalid]:hover:border-destructive-a11'

class InputBaseComponent(BaseUIComponent):

    @property
    def import_var(self):
        ...

    @classmethod
    def create(cls, *children, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'InputBaseComponent':
        """Create the component.

        Args:
            *children: The children of the component.
            unstyled: Whether the component should be unstyled
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            ref: The Var to pass as the ref to the component.
            class_name: The class name for the component.
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class InputRoot(InputBaseComponent, ReflexInput):

    @classmethod
    def create(cls, *children, render_: Component | Var[Component] | None=None, unstyled: Var[bool] | bool | None=None, accept: Var[str] | str | None=None, alt: Var[str] | str | None=None, auto_complete: Var[str] | str | None=None, auto_focus: Var[bool] | bool | None=None, capture: Literal['environment', 'user', False, True] | Var[Literal['environment', 'user', False, True]] | None=None, checked: Var[bool] | bool | None=None, default_checked: Var[bool] | bool | None=None, default_value: Var[float | int | str] | float | int | str | None=None, disabled: Var[bool] | bool | None=None, form: Var[str] | str | None=None, form_action: Var[str] | str | None=None, form_enc_type: Var[str] | str | None=None, form_method: Var[str] | str | None=None, form_no_validate: Var[bool] | bool | None=None, form_target: Var[str] | str | None=None, list: Var[str] | str | None=None, max: Var[float | int | str] | float | int | str | None=None, max_length: Var[float | int] | float | int | None=None, min_length: Var[float | int] | float | int | None=None, min: Var[float | int | str] | float | int | str | None=None, multiple: Var[bool] | bool | None=None, name: Var[str] | str | None=None, pattern: Var[str] | str | None=None, placeholder: Var[str] | str | None=None, read_only: Var[bool] | bool | None=None, required: Var[bool] | bool | None=None, size: Var[float | int | str] | float | int | str | None=None, src: Var[str] | str | None=None, step: Var[float | int | str] | float | int | str | None=None, type: Literal['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'] | Var[Literal['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week']] | None=None, value: Var[float | int | str] | float | int | str | None=None, access_key: Var[str] | str | None=None, auto_capitalize: Literal['characters', 'none', 'off', 'on', 'sentences', 'words'] | Var[Literal['characters', 'none', 'off', 'on', 'sentences', 'words']] | None=None, content_editable: Literal['inherit', 'plaintext-only', False, True] | Var[Literal['inherit', 'plaintext-only', False, True]] | None=None, context_menu: Var[str] | str | None=None, dir: Var[str] | str | None=None, draggable: Var[bool] | bool | None=None, enter_key_hint: Literal['done', 'enter', 'go', 'next', 'previous', 'search', 'send'] | Var[Literal['done', 'enter', 'go', 'next', 'previous', 'search', 'send']] | None=None, hidden: Var[bool] | bool | None=None, input_mode: Literal['decimal', 'email', 'none', 'numeric', 'search', 'tel', 'text', 'url'] | Var[Literal['decimal', 'email', 'none', 'numeric', 'search', 'tel', 'text', 'url']] | None=None, item_prop: Var[str] | str | None=None, lang: Var[str] | str | None=None, role: Literal['alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed', 'figure', 'form', 'grid', 'gridcell', 'group', 'heading', 'img', 'link', 'list', 'listbox', 'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'search', 'searchbox', 'separator', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'textbox', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem'] | Var[Literal['alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader', 'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed', 'figure', 'form', 'grid', 'gridcell', 'group', 'heading', 'img', 'link', 'list', 'listbox', 'listitem', 'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region', 'row', 'rowgroup', 'rowheader', 'scrollbar', 'search', 'searchbox', 'separator', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'textbox', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem']] | None=None, slot: Var[str] | str | None=None, spell_check: Var[bool] | bool | None=None, tab_index: Var[int] | int | None=None, title: Var[str] | str | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()] | EventType[str]]=None, on_change: Optional[EventType[()] | EventType[str]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()] | EventType[str]]=None, on_key_down: Optional[EventType[()] | EventType[str] | EventType[str, KeyInputInfo]]=None, on_key_up: Optional[EventType[()] | EventType[str] | EventType[str, KeyInputInfo]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, on_value_change: Optional[EventType[()] | EventType[str] | EventType[str, dict]]=None, **props) -> 'InputRoot':
        """Create a high level input component with simplified API."""
        ...

class HighLevelInput(InputBaseComponent):

    @classmethod
    def create(cls, *children, size: Literal['lg', 'md', 'sm', 'xl', 'xs'] | Var[Literal['lg', 'md', 'sm', 'xl', 'xs']] | None=None, icon: Var[str] | str | None=None, show_clear_button: Var[bool] | bool | None=None, clear_events: Var[list[EventHandler]] | list[EventHandler] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'HighLevelInput':
        """Create a high level input component with simplified API."""
        ...

class Input(ComponentNamespace):
    root = staticmethod(InputRoot.create)
    class_names = ClassNames

    @staticmethod
    def __call__(*children, size: Literal['lg', 'md', 'sm', 'xl', 'xs'] | Var[Literal['lg', 'md', 'sm', 'xl', 'xs']] | None=None, icon: Var[str] | str | None=None, show_clear_button: Var[bool] | bool | None=None, clear_events: Var[list[EventHandler]] | list[EventHandler] | None=None, unstyled: Var[bool] | bool | None=None, style: Sequence[Mapping[str, Any]] | Mapping[str, Any] | Var[Mapping[str, Any]] | Breakpoints | None=None, key: Any | None=None, id: Any | None=None, ref: Var | None=None, class_name: Any | None=None, custom_attrs: dict[str, Var | Any] | None=None, on_blur: Optional[EventType[()]]=None, on_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_context_menu: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_double_click: Optional[EventType[()] | EventType[PointerEventInfo]]=None, on_focus: Optional[EventType[()]]=None, on_mount: Optional[EventType[()]]=None, on_mouse_down: Optional[EventType[()]]=None, on_mouse_enter: Optional[EventType[()]]=None, on_mouse_leave: Optional[EventType[()]]=None, on_mouse_move: Optional[EventType[()]]=None, on_mouse_out: Optional[EventType[()]]=None, on_mouse_over: Optional[EventType[()]]=None, on_mouse_up: Optional[EventType[()]]=None, on_scroll: Optional[EventType[()]]=None, on_scroll_end: Optional[EventType[()]]=None, on_unmount: Optional[EventType[()]]=None, **props) -> 'HighLevelInput':
        """Create a high level input component with simplified API."""
        ...
input = Input()